#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import os
import cv2 as cv
import numpy as np

cv_xml_dir = "D:\ProgramData\Anaconda3\Lib\site-packages\cv2\data"

cur_dir = os.getcwd()
root_dir = os.path.abspath(os.path.dirname(cur_dir))
data_dir = os.path.join(root_dir, 'data')
trainning_data = os.path.join(data_dir, 'trainning_data')
    
def rectangle_cirle(img, faces) :
    # rectangle_cirle(img, faces)
    for (x, y, w, h) in faces :
        cv.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
    # cv.imshow('img', img)
    # cv.waitKey(0)
    # cv.destroyAllWindows()
 
def draw_text(img, text, x, y) :
    # for (x, y, w, h) in faces :
    cv.putText(img, text, (x, y),  cv.FONT_HERSHEY_COMPLEX,1, (128, 128, 0), 2)
    
def detect_face(img) :
    # print("handing img path %s " % img)
    
    img = cv.imread(img)
    # to gray
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    face_cascade = cv.CascadeClassifier(os.path.join(cv_xml_dir, 'haarcascade_frontalface_default.xml'))    
    faces = face_cascade.detectMultiScale(gray, scaleFactor = 1.3, minNeighbors = 5)
    if len(faces) == 0 :
        return None, None
    # test detect
    # print(len(faces))
    if len(faces) > 1 :
        faces = faces[0]
    # print(faces)        
    (x, y, w, h) = faces[0]
    # print(faces)
    return gray[y:y+w, x:x+h], faces
    
def prepare_training_data() :
    print("function prepare training...") 
    faces = []
    labels = []
    data_forpreare = os.listdir(trainning_data)
    print(data_forpreare)
    for dir in data_forpreare :
        # dir 0 ,1
        label = int(dir)
        label_dir = os.path.join(trainning_data, dir)
        img_dir = os.listdir(label_dir)
        # print(img_dir)
        for img in img_dir :
            # print("img %s" % img)
            if not img.endswith('jpg') :
                continue
            img_src = os.path.join(label_dir, img)
            # print("img_src_path %s" % img_src)
    #         # cv.imshow("Preparing images...", img_src)
            cv.waitKey(100)
            img = cv.imread(img_src)
            face, rect = detect_face(img_src)
            # print("face " face)
            # print("rect " rect)
            if face is not None :
                faces.append(face)
                labels.append(label)
    cv.waitKey(1)
    cv.destroyAllWindows()
    # print(faces)                   
    print(labels)  
    return faces, labels            
# def predict               
def predict(img_path):
    img = cv.imread(img_path)
    names = ["other", "11Name", "222bName"]    
    img_copy = img.copy()
    faces_pre, detected_face = detect_face(img_path)
    rec_label = face_recognizer_model.predict(faces_pre)
    # print("recongnize_label %s " % rec_label)
    print('rec_label')
    print(rec_label)
    print(detected_face)
    rectangle_cirle(img_copy, detected_face)
    (x, y, w, h) = detected_face[0]
    # # draw_text(img_copy, 'aaaa', detect_face[0], detect_face[1]-5)
    
    draw_text(img_copy, names[rec_label[0]], x,  y)
    cv.imshow('img',img_copy)
    cv.waitKey(0)
    cv.destroyAllWindows()
def train_and_save_mode() :
    print(1)
    
if __name__ == "__main__":
    test_img = os.path.join(trainning_data, '0', '01.jpg')
    # if not os.path.isfile(test_img) :
    #     print("No png")
    # else :
    #     # detect_face(test_img)
    #     print(1)
        
    # begin traning
    # faces, labels = prepare_training_data()
    face_recognizer_model = cv.face.LBPHFaceRecognizer_create()
    face_recognizer_model.read("lbph.xml")
    # print(help(face_recognizer_model))
    # face_recognizer_model.train(faces, np.array(labels))
    print("trainning_over")
    # face_recognizer_model.write("lbph.xml")
    # face_recognizer_model.save("lbph_algorithm.xml")
    predict('20.jpg')
   
